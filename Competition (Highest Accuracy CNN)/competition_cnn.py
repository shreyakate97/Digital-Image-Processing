# -*- coding: utf-8 -*-
"""Competition_CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N-mszokufwb-GBJCVqNODZ4f8-AV3T6D
"""

from matplotlib import pyplot
from keras.datasets import cifar10
# load dataset
(trainX, trainY), (testX, testY) = cifar10.load_data()

# trainX=trainX[0:1562]
# trainY=trainY[0:1562]

trainX.shape

import sys
from matplotlib import pyplot
from keras.datasets import cifar10
from keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Dense
from keras.layers import Flatten
from keras.optimizers import SGD

from keras.layers import Dropout

trainY = to_categorical(trainY)
testY = to_categorical(testY)

train_norm = trainX.astype('float32')
test_norm = testX.astype('float32')

train_norm = train_norm/255.0
test_norm = test_norm/255.0

# datagen = ImageDataGenerator(width_shift_range=0.1, height_shift_range=0.1, horizontal_flip=True)
# new_train = datagen.flow(train_norm, trainY, batch_size=64)

def define_model():
	model = Sequential()
	model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(32, 32, 3)))
	model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
	model.add(MaxPooling2D((2, 2)))
	model.add(Dropout(0.2))
	model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
	model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
	model.add(MaxPooling2D((2, 2)))
	model.add(Dropout(0.2))
	model.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
	model.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
	model.add(MaxPooling2D((2, 2)))
	model.add(Dropout(0.2))
	model.add(Flatten())
	model.add(Dense(128, activation='relu', kernel_initializer='he_uniform'))
	model.add(Dropout(0.2))
	model.add(Dense(10, activation='softmax'))
	# compile model
	opt = SGD(lr=0.001, momentum=0.9)
	model.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])
	return model

import time

start = time.time()

m = define_model()

h = m.fit(train_norm, trainY, epochs=60, batch_size=32, validation_data=(test_norm,testY),verbose=0)

end = time.time()
print('CNN training time:',(end - start))

start = time.time()

_,acc = m.evaluate(train_norm,trainY,verbose=0)
print('training accuracy:',acc)
_,acc = m.evaluate(test_norm,testY,verbose=0)
print('test accuracy:',acc)

end = time.time()
print('CNN inference time:',(end - start))

import matplotlib.pyplot as plt
import numpy as np

plt.plot(np.arange(1,61,1),h.history['accuracy'],'r',label='training')
plt.plot(np.arange(1,61,1),h.history['val_accuracy'],'g',label='testing')
plt.grid(True)
plt.xticks(np.arange(0,61,2))
plt.yticks(np.arange(0,1.1,0.1))
plt.xlabel('Number of epochs')
plt.ylabel('Accuracy')
fig = plt.gcf()
fig.set_size_inches(10,8)
fig.savefig('m_1.png', dpi=100)
plt.legend()

plt.show()

m.summary() # to calculate number of parameters